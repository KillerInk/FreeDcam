import java.util.function.Consumer

apply plugin: "cpp"

class StreamGobbler extends Thread {
    InputStream is;
    Logger logger2;

    private StreamGobbler(InputStream is, Logger type) {
        this.is = is;
        this.logger2 = type;
    }

    @Override
    public void run() {
        try {
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
            while ((line = br.readLine()) != null)
                logger2.quiet(line);
        }
        catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
}

def halide_dir = findProperty('halideDir')

gradle.afterProject { project ->
    if (project.state.failure) {
        logger.quiet("afterProject of $project FAILED")
    } else {
        logger.quiet( "afterProject of $project succeeded")
    }
}

gradle.projectsEvaluated { project ->
    logger.quiet("projectsEvaluated of $project succeeded")
}

gradle.buildFinished {
    logger.quiet("buildFinished ")
}

tasks.build.doLast(){
    logger.quiet( 'tasks.build.doLast This will be printed after the build task even if something else calls the build task')
}



model{

    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x64"
        }
    }
    components{
        halide_generator(NativeExecutableSpec) {
            //targetPlatform "x86"
            targetPlatform "x64"
            sources {
                cpp {
                    source {
                        srcDirs "generator/", "${halide_dir}/tools/", "${halide_dir}/include/","generator/hdrplus/"
                        include "stage1_align_merge_generator.cpp","stage1_alignmerge_generator.cpp", "GenGen.cpp","align.cpp", "merge.cpp", "util.cpp"
                    }
                }
            }
            binaries{
                all {
                    cppCompiler.args "/I${halide_dir}/include/"
                    // "/bin" assumes Makefile build for Halide; "/build/lib" assumes CMake build
                    linker.args "${halide_dir}/Release/Halide.lib", "/LIBPATH:${halide_dir}/Release/Halide.dll"
                    logger.quiet("binaries all")
                }
            }

            //hook into clean and delete libs too
            clean{
                delete "$project.projectDir/libs"
            }

            task copyHalideLib(type: Copy) {
                logger.quiet("copyHalideLib from ${halide_dir}/Release/Halide.dll to ${buildDir}/exe/halide_generator/")
                from file("${halide_dir}/Release/Halide.dll")
                into file("${buildDir}/exe/halide_generator")
            }

            task copyFiles(type: Copy){
                logger.quiet("copyFiles")
                from "$projectDir/libs"

                into "$projectDir/../app/libs"
            }

            //hook into build
            build{
                //on windows its needed, if halide is not in the %PATH, to copy the halide.dll to the exe to run the generator
                dependsOn copyHalideLib
                //the compiler runs after doFirst and calls doLast
                doFirst {
                    logger.quiet("build.doFirst")
                    Map<String, String> archs = [
                            // armeabi and armeabi-v7a are the same as far as Halide is concerned
                            /*"armeabi"    : "arm-32-android",*/
                            "armeabi-v7a": "arm-32-android",
                            "arm64-v8a"  : "arm-64-android",
                            /*"mips"       : "mips-32-android",
                            "x86_64"     : "x86-64-android-sse41",
                            "x86"        : "x86-32-android"*/
                    ]
                    //define the generators that should get builded
                    def gens = ["stage1_align_merge","stage1_alignmerge"]
                    gens.each { gen ->
                        archs.each { arch ->
                            mkdir("${projectDir}/libs/${arch.key}")
                            String envVars = "${buildDir}/exe/halide_generator/halide_generator.exe -g ${gen} -o ${projectDir}/libs/${arch.key} target=${arch.value}-opencl"
                            ProcessBuilder processBuilder = new ProcessBuilder()
                            processBuilder.command(envVars.split(' '))
                            logger.quiet("Output of running " + envVars + " is: ")
                            processBuilder.redirectErrorStream(true);
                            // Inherit System.out as redirect output stream
                            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
                            Process process = processBuilder.start()
                            StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), logger)
                            outputGobbler.start()
                            process.waitFor()

                        }
                    }
                }

                doLast {
                    logger.quiet("build.doLast")
                    //define abis
                    logger.quiet("copyFiles")
                    copy{
                        from "$projectDir/libs"
                        include "**/*.a"
                        into "$projectDir/../app/libs"
                    }
                    copy{
                        from "${halide_dir}/include/HalideRuntime.h", "${halide_dir}/include/HalideBuffer.h"
                        into "${projectDir}/../app/src/main/jni/include"
                    }
                    copy{
                        from "$projectDir/libs/arm64-v8a/"
                        include "*.h"
                        into "${projectDir}/../app/src/main/jni/include"
                    }

                }
            }
        }
    }
}







